################################################################################
#
################################################################################
language:
    - cpp

################################################################################
#
################################################################################
os:
    - linux
# Currently only available on request
#    - osx  

################################################################################
#
################################################################################
compiler: 
    - gcc
    - clang
  
################################################################################
# \TODO: Test full matrix:
# ALPAKA_INTEGRATION_TEST                       : {ON}
# CXX                                           : {g++, clang++}
#   [clang++] ALPAKA_CLANG_LIBSTDCPP_VERSION    : {4.8, 4.9}
#   [clang++] ALPAKA_CLANG_VER                  : {3.5, 3.6, 3.7}
#   [g++] ALPAKA_GCC_VER                        : {4.8, 4.9}
# ALPAKA_BOOST_VER                              : {1.56, 1.57}
# ALPAKA_CMAKE_VER                              : {2.8.12.2, 3.0.0, 3.0.1, 3.0.2, 3.1.0, 3.1.1}
# CMAKE_BUILD_TYPE                              : {DEBUG, RELEASE}
# ALPAKA_DEBUG                                  : {0, 1, 2}
# ALPAKA_SERIAL_ENABLE                          : {ON, OFF}
# ALPAKA_THREADS_ENABLE                         : {ON, OFF}
# ALPAKA_OPENMP_ENABLE                          : {ON, OFF}
#   [ON] OMP_NUM_THREADS                        : {1, 2, 3, 4}
# ALPAKA_CUDA_ENABLE                            : {ON, OFF}
#   [ON] ALPAKA_CUDA_VERSION                    : {6.5, 7.0}
# ALPAKA_FIBERS_ENABLE                          : {ON, OFF}
# And one analysis build
# ALPAKA_ANALYSIS                               : {ON, OFF}
#
# NOTE: boost 1.55.0 is supported but bootstrap of this version fails because the boost.build of the tagged git release is buggy.
################################################################################
env: 
    global:
        - ALPAKA_INTEGRATION_TEST=ON
        - ALPAKA_SERIAL_ENABLE=ON
        - ALPAKA_THREADS_ENABLE=ON
        - ALPAKA_OPENMP_ENABLE=ON
        - ALPAKA_FIBERS_ENABLE=ON
        - ALPAKA_CUDA_ENABLE=ON
        - ALPAKA_CUDA_VERSION=6.5
        - ALPAKA_CLANG_LIBSTDCPP_VERSION=4.9

    matrix:
        - ALPAKA_ANALYSIS=ON  CMAKE_BUILD_TYPE=DEBUG   ALPAKA_DEBUG=2 OMP_NUM_THREADS=4 ALPAKA_GCC_VER=4.8 ALPAKA_CLANG_VER=3.6 ALPAKA_BOOST_VER=1.56.0 ALPAKA_CMAKE_VER=3.1.0
        - ALPAKA_ANALYSIS=OFF CMAKE_BUILD_TYPE=DEBUG   ALPAKA_DEBUG=2 OMP_NUM_THREADS=4 ALPAKA_GCC_VER=4.9 ALPAKA_CLANG_VER=3.5 ALPAKA_BOOST_VER=1.56.0 ALPAKA_CMAKE_VER=3.1.1
        - ALPAKA_ANALYSIS=OFF CMAKE_BUILD_TYPE=DEBUG   ALPAKA_DEBUG=2 OMP_NUM_THREADS=1 ALPAKA_GCC_VER=4.8 ALPAKA_CLANG_VER=3.4 ALPAKA_BOOST_VER=1.57.0 ALPAKA_CMAKE_VER=3.1.0
        - ALPAKA_ANALYSIS=OFF CMAKE_BUILD_TYPE=DEBUG   ALPAKA_DEBUG=1 OMP_NUM_THREADS=1 ALPAKA_GCC_VER=4.9 ALPAKA_CLANG_VER=3.7 ALPAKA_BOOST_VER=1.57.0 ALPAKA_CMAKE_VER=3.1.1
        - ALPAKA_ANALYSIS=OFF CMAKE_BUILD_TYPE=DEBUG   ALPAKA_DEBUG=0 OMP_NUM_THREADS=4 ALPAKA_GCC_VER=4.8 ALPAKA_CLANG_VER=3.6 ALPAKA_BOOST_VER=1.56.0 ALPAKA_CMAKE_VER=3.1.0
        - ALPAKA_ANALYSIS=OFF CMAKE_BUILD_TYPE=DEBUG   ALPAKA_DEBUG=0 OMP_NUM_THREADS=4 ALPAKA_GCC_VER=4.9 ALPAKA_CLANG_VER=3.5 ALPAKA_BOOST_VER=1.57.0 ALPAKA_CMAKE_VER=3.1.1

        - ALPAKA_ANALYSIS=OFF CMAKE_BUILD_TYPE=RELEASE ALPAKA_DEBUG=2 OMP_NUM_THREADS=4 ALPAKA_GCC_VER=4.8 ALPAKA_CLANG_VER=3.4 ALPAKA_BOOST_VER=1.56.0 ALPAKA_CMAKE_VER=2.8.12.2
        - ALPAKA_ANALYSIS=OFF CMAKE_BUILD_TYPE=RELEASE ALPAKA_DEBUG=2 OMP_NUM_THREADS=4 ALPAKA_GCC_VER=4.9 ALPAKA_CLANG_VER=3.7 ALPAKA_BOOST_VER=1.56.0 ALPAKA_CMAKE_VER=3.0.0
        - ALPAKA_ANALYSIS=OFF CMAKE_BUILD_TYPE=RELEASE ALPAKA_DEBUG=2 OMP_NUM_THREADS=1 ALPAKA_GCC_VER=4.8 ALPAKA_CLANG_VER=3.6 ALPAKA_BOOST_VER=1.57.0 ALPAKA_CMAKE_VER=3.0.1
        - ALPAKA_ANALYSIS=OFF CMAKE_BUILD_TYPE=RELEASE ALPAKA_DEBUG=1 OMP_NUM_THREADS=1 ALPAKA_GCC_VER=4.9 ALPAKA_CLANG_VER=3.5 ALPAKA_BOOST_VER=1.57.0 ALPAKA_CMAKE_VER=3.0.2
        - ALPAKA_ANALYSIS=OFF CMAKE_BUILD_TYPE=RELEASE ALPAKA_DEBUG=0 OMP_NUM_THREADS=4 ALPAKA_GCC_VER=4.8 ALPAKA_CLANG_VER=3.4 ALPAKA_BOOST_VER=1.56.0 ALPAKA_CMAKE_VER=3.1.0
        - ALPAKA_ANALYSIS=OFF CMAKE_BUILD_TYPE=RELEASE ALPAKA_DEBUG=0 OMP_NUM_THREADS=4 ALPAKA_GCC_VER=4.9 ALPAKA_CLANG_VER=3.7 ALPAKA_BOOST_VER=1.57.0 ALPAKA_CMAKE_VER=3.1.1

matrix:
#    exclude:
#        - os: osx
#          compiler: gcc
#    TODO: Exclusion does not work this way. Always the whole env:matrix: line is required.
#        - os: osx
#          env: ALPAKA_CUDA_ENABLE=ON
        
    allow_failures:
        - compiler: clang
        - os: osx

################################################################################
# Use this to prepare the system to install prerequisites or dependencies.
################################################################################
before_install:
    # Print the travis environment variables: http://docs.travis-ci.com/user/ci-environment/
    - echo ${TRAVIS_BRANCH}
    - echo ${TRAVIS_BUILD_DIR}
    - echo ${TRAVIS_BUILD_ID}
    - echo ${TRAVIS_BUILD_NUMBER}
    - echo ${TRAVIS_COMMIT}
    - echo ${TRAVIS_COMMIT_RANGE}
    - echo ${TRAVIS_JOB_ID}
    - echo ${TRAVIS_JOB_NUMBER}
    - echo ${TRAVIS_PULL_REQUEST}
    - echo ${TRAVIS_SECURE_ENV_VARS}
    - echo ${TRAVIS_REPO_SLUG}
    - echo ${TRAVIS_OS_NAME}
    - echo ${TRAVIS_TAG}
    
    # g++ 4.8 / 4.9 / clang dependencies
    - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
 
    # clang 3.4 / 3.5 / 3.6 / current
    - if [ "${CXX}" == "clang++" ] ;then sudo add-apt-repository -y 'deb http://llvm.org/apt/precise/ llvm-toolchain-precise-3.4 main' ;fi
    - if [ "${CXX}" == "clang++" ] ;then sudo add-apt-repository -y 'deb http://llvm.org/apt/precise/ llvm-toolchain-precise-3.5 main' ;fi
    - if [ "${CXX}" == "clang++" ] ;then sudo add-apt-repository -y 'deb http://llvm.org/apt/precise/ llvm-toolchain-precise-3.6 main' ;fi
    - if [ "${CXX}" == "clang++" ] ;then sudo add-apt-repository -y 'deb http://llvm.org/apt/precise/ llvm-toolchain-precise main' ;fi
    - if [ "${CXX}" == "clang++" ] ;then wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | sudo apt-key add - ;fi
    
    # git
    - sudo add-apt-repository -y ppa:git-core/ppa

    - sudo apt-get update

################################################################################
# Use this to install any prerequisites or dependencies necessary to run your build.
################################################################################
install:
    # Step out of the alpaka directory.
    - cd ../../
    
    #-------------------------------------------------------------------------------
    # Install sloc
    - if [ "${ALPAKA_ANALYSIS}" == "ON" ] ;then sudo apt-get install sloccount ;fi
  
    #-------------------------------------------------------------------------------
    # Install cppcheck
    - if [ "${ALPAKA_ANALYSIS}" == "ON" ] ;then sudo apt-get install cppcheck ;fi
    
    #-------------------------------------------------------------------------------
    # Get the curent gcc version.
    - git --version 
    - sudo apt-get install git
    - git --version

    #-------------------------------------------------------------------------------
    # gcc 4.6 is too old...
    - if [ "${CXX}" == "g++" ] 
      ;then
        sudo apt-get install g++-${ALPAKA_GCC_VER}
        && sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${ALPAKA_GCC_VER} 50
        && sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${ALPAKA_GCC_VER} 50
      ;fi
    # Extract the version numbers.
    - if [ "${CXX}" == "g++" ] 
      ;then 
        ALPAKA_GCC_VER_MAJOR=${ALPAKA_GCC_VER:0:1} 
        && ALPAKA_GCC_VER_MINOR=${ALPAKA_GCC_VER:2:1}
        && echo ${ALPAKA_GCC_VER_MAJOR}
        && echo ${ALPAKA_GCC_VER_MINOR}
      ;fi
    # Disable fibers for old gcc versions not supporting it.
    - if [ "${CXX}" == "g++" ]
      ;then
        if (( (( ${ALPAKA_GCC_VER_MAJOR} < 4 )) || ( (( ${ALPAKA_GCC_VER_MAJOR} == 4 )) && (( ${ALPAKA_GCC_VER_MINOR} < 9 )) ) ))
          ;then 
            export ALPAKA_FIBERS_ENABLE=OFF
            && echo ALPAKA_FIBERS_ENABLE=${ALPAKA_FIBERS_ENABLE} because the gcc version does not support it!
          ;fi
      ;fi
  
    #-------------------------------------------------------------------------------
    # Install clang.
    # We have to prepend /usr/bin to the path because else the preinstalled clang from usr/bin/local/ is used.
    - if [ "${CXX}" == "clang++" ]
      ;then 
        sudo apt-get install libstdc++-${ALPAKA_CLANG_LIBSTDCPP_VERSION}-dev
        && sudo apt-get install clang-${ALPAKA_CLANG_VER}
        && sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${ALPAKA_CLANG_VER} 50
        && sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${ALPAKA_CLANG_VER} 50
        && sudo update-alternatives --install /usr/bin/cc cc /usr/bin/clang 50
        && sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++ 50
        && export PATH=/usr/bin:$PATH
      ;fi
    # Extract the version numbers.
    - if [ "${CXX}" == "clang++" ] 
      ;then 
        ALPAKA_CLANG_VER_MAJOR=${ALPAKA_CLANG_VER:0:1} 
        && ALPAKA_CLANG_VER_MINOR=${ALPAKA_CLANG_VER:2:1}
        && echo ${ALPAKA_CLANG_VER_MAJOR}
        && echo ${ALPAKA_CLANG_VER_MINOR}
      ;fi
    # Clang versions lower than 3.8 do not (currently) support OpenMP correctly.
    - if [ "${CXX}" == "clang++" ]
      ;then 
        if (( (( ${ALPAKA_CLANG_VER_MAJOR} < 3 )) || ( (( ${ALPAKA_CLANG_VER_MAJOR} == 3 )) && (( ${ALPAKA_CLANG_VER_MINOR} < 8 )) ) ))
          ;then
            export ALPAKA_OPENMP_ENABLE=OFF
            && echo ALPAKA_OPENMP_ENABLE=${ALPAKA_OPENMP_ENABLE} because the clang version does not support it!
          ;fi
      ;fi
    # Disable fibers for old clang versions.
    - if [ "${CXX}" == "clang++" ]
      ;then 
        if (( (( ${ALPAKA_CLANG_VER_MAJOR} < 3 )) || ( (( ${ALPAKA_CLANG_VER_MAJOR} == 3 )) && (( ${ALPAKA_CLANG_VER_MINOR} < 5 )) ) ))
          ;then 
            export ALPAKA_FIBERS_ENABLE=OFF
            && echo ALPAKA_FIBERS_ENABLE=${ALPAKA_FIBERS_ENABLE} because the clang version does not support it!
          ;fi
      ;fi
  
    #-------------------------------------------------------------------------------
    # Extract the CUDA version numbers.
    - if [ "${ALPAKA_CUDA_ENABLE}" == "ON" ]
      ;then 
        ALPAKA_CUDA_VER_MAJOR=${ALPAKA_CUDA_VERSION:0:1} 
        && ALPAKA_CUDA_VER_MINOR=${ALPAKA_CUDA_VERSION:2:1}
        && echo ${ALPAKA_CUDA_VER_MAJOR}
        && echo ${ALPAKA_CUDA_VER_MINOR}
      ;fi
    # CUDA 6.5 does not support gcc > 4.8.
    - if [ "${CXX}" == "g++" ]
      ;then
        if (( (( ${ALPAKA_GCC_VER_MAJOR} > 4 ))  || ( (( ${ALPAKA_GCC_VER_MAJOR} == 4 )) && (( ${ALPAKA_GCC_VER_MINOR} > 8 )) ) ))
          ;then 
            if (( (( ${ALPAKA_CUDA_VER_MAJOR} == 6 )) && (( ${ALPAKA_CUDA_VER_MINOR} == 5 )) ))
              ;then 
                export ALPAKA_CUDA_ENABLE=OFF
                && echo ALPAKA_CUDA_ENABLE=${ALPAKA_CUDA_ENABLE} because nvcc 6.5 does not support the gcc version!
              ;fi
          ;fi
      ;fi
    # CUDA 6.5 does not support clang as c++11 compiler.
    - if [ "${CXX}" == "clang++" ]
      ;then 
        export ALPAKA_CUDA_ENABLE=OFF
        && echo ALPAKA_CUDA_ENABLE=${ALPAKA_CUDA_ENABLE} because nvcc 6.5 does not support clang for c++11!
      ;fi
    # Install nvcc
    - if [ "${ALPAKA_CUDA_ENABLE}" == "ON" ]
      ;then 
        wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1204/x86_64/cuda-repo-ubuntu1204_6.5-14_amd64.deb
        && sudo dpkg -i cuda-repo-ubuntu1204_6.5-14_amd64.deb
        && sudo apt-get -y update
        && sudo apt-get -y install cuda-core-${ALPAKA_CUDA_VERSION} cuda-cudart-${ALPAKA_CUDA_VERSION} cuda-cudart-dev-${ALPAKA_CUDA_VERSION}
        && sudo ln -s /usr/local/cuda-${ALPAKA_CUDA_VERSION} /usr/local/cuda
        && export PATH=/usr/local/cuda-${ALPAKA_CUDA_VERSION}/bin:$PATH
        && export LD_LIBRARY_PATH=/usr/local/cuda-${ALPAKA_CUDA_VERSION}/lib64:$LD_LIBRARY_PATH
      ;fi
    # Currently we do not install CUDA fully: sudo apt-get -y install cuda 
    # We only install the minimal packages. Because of our manual partial installation we have to create a symlink at /usr/local/cuda
    
    #-------------------------------------------------------------------------------
    # CMake 2.8.7 is too old...
    # Remove the old version.
    - sudo apt-get remove cmake
    # Extract the version numbers.
    - ALPAKA_CMAKE_VER_MAJOR=${ALPAKA_CMAKE_VER:0:1}
    - echo ${ALPAKA_CMAKE_VER_MAJOR}
    - ALPAKA_CMAKE_VER_MINOR=${ALPAKA_CMAKE_VER:2:1}
    - echo ${ALPAKA_CMAKE_VER_MINOR}
    # NOTE: Older versions have to be built from source because CMake does not provide older x64 binaries.
    - if (( (( ${ALPAKA_CMAKE_VER_MAJOR} < 3 ))  || ( (( ${ALPAKA_CMAKE_VER_MAJOR} == 3 )) && (( ${ALPAKA_CMAKE_VER_MINOR} < 1 )) ) ))
      ;then 
        wget "http://www.cmake.org/files/v${ALPAKA_CMAKE_VER_MAJOR}.${ALPAKA_CMAKE_VER_MINOR}/cmake-${ALPAKA_CMAKE_VER}.tar.gz"
        && tar -xzf "cmake-${ALPAKA_CMAKE_VER}.tar.gz"
        && "./cmake-${ALPAKA_CMAKE_VER}/bootstrap" --prefix=/usr
        && make
        && sudo make install
      ;else
        wget "http://www.cmake.org/files/v${ALPAKA_CMAKE_VER_MAJOR}.${ALPAKA_CMAKE_VER_MINOR}/cmake-${ALPAKA_CMAKE_VER}-Linux-x86_64.tar.gz"
        && tar -xzf "cmake-${ALPAKA_CMAKE_VER}-Linux-x86_64.tar.gz"
        && sudo cp -fR cmake-${ALPAKA_CMAKE_VER}-Linux-x86_64/* /usr
      ;fi

    #-------------------------------------------------------------------------------
    # Clone boost.
    # If fibers are enabled we need the current development version of boost.context (this forces usage of boost.coroutine develop).
    - git clone -b boost-$ALPAKA_BOOST_VER --recursive --single-branch --depth 1 https://github.com/boostorg/boost.git boost
    - cd boost
    - export ALPAKA_BOOST_ROOT_DIR=`pwd`
    - echo ${ALPAKA_BOOST_ROOT_DIR}

    - cd libs

    # Clone boost.fiber.
    # TODO: remove the reset and add back --depth 1 if the current head is functional again.
    - if [ "${ALPAKA_FIBERS_ENABLE}" == "ON" ]
      ;then
        git clone -b develop --single-branch https://github.com/olk/boost-fiber.git fiber
        && cd fiber
        && git reset --hard 6a1257442bb82e9082a55cacc2c6ebe02b4aa540
        && cd ../
      ;fi
      
    - cd ../

    # Prepare building of boost.
    - sudo ./bootstrap.sh --with-toolset=${CC}
    # Create file links.
    - sudo ./b2 headers
    # Prepare the library destination directory.
    - cd ../
    - mkdir boost_libs
    - cd boost_libs
    - mkdir x64
    - export ALPAKA_BOOST_LIB_DIR=`pwd`/x64/lib
    - echo ${ALPAKA_BOOST_LIB_DIR}
    - cd ../boost/
    # Clang is not supported by the FindBoost script. 
    - if [ "${CXX}" == "clang++" ]
      ;then 
        export ALPAKA_BOOST_COMPILER=-clang${ALPAKA_CLANG_VER_MAJOR}${ALPAKA_CLANG_VER_MINOR}
        && echo ${ALPAKA_BOOST_COMPILER}
      ;fi
    # Build the libraries required.
    - if [ "${ALPAKA_FIBERS_ENABLE}" == "ON" ]
      ;then
        sudo ./b2 -j2 --layout=versioned --toolset=${CC}
        --with-program_options --with-fiber --with-coroutine --with-context --with-thread --with-system --with-atomic --with-chrono --with-date_time --with-regex
        architecture=x86 address-model=64 variant=debug,release link=static threading=multi runtime-link=shared
        --stagedir=../boost_libs/x64 stage
      ;else
        sudo ./b2 -j2 --layout=versioned --toolset=${CC}
        --with-program_options
        architecture=x86 address-model=64 variant=debug,release link=static threading=multi runtime-link=shared
        --stagedir=../boost_libs/x64 stage
      ;fi
    - cd ..
    
################################################################################
# Use this to prepare your build for testing.
################################################################################
before_script:
    - cd ${TRAVIS_BUILD_DIR}/
    - pwd
    
    - which cmake
    - cmake --version
    
    - which ${CXX}
    - ${CXX} -v

    - if [ "${ALPAKA_CUDA_ENABLE}" == "ON" ]
      ;then 
        which nvcc
        && nvcc -V
      ;fi
    
################################################################################
# All commands must exit with code 0 on success. Anything else is considered failure.
################################################################################
script:
    #-------------------------------------------------------------------------------
    # sloc
    - if [ "${ALPAKA_ANALYSIS}" == "ON" ] ;then sloccount . ;fi
    
    #-------------------------------------------------------------------------------
    # TODO/FIXME/HACK
    - if [ "${ALPAKA_ANALYSIS}" == "ON" ] ;then grep -r HACK * ;fi
    - if [ "${ALPAKA_ANALYSIS}" == "ON" ] ;then grep -r FIXME * ;fi
    - if [ "${ALPAKA_ANALYSIS}" == "ON" ] ;then grep -r TODO * ;fi

    #-------------------------------------------------------------------------------
    # Build and execute all tests. 
    - cd test/
    
    #-------------------------------------------------------------------------------
    # cppcheck
    #  --inline-suppr
    # Once only with errors returning error a failure on error.
    - if [ "${ALPAKA_ANALYSIS}" == "ON" ] ;then cppcheck --force --verbose --error-exitcode=1 -j2 vectorAdd/src/ matMul/src/ sharedMem/src/ mandelbrot/src/ ;fi
    # Once with warnings but no failure return code.
    - if [ "${ALPAKA_ANALYSIS}" == "ON" ] ;then cppcheck --force --verbose --enable=all -j2 vectorAdd/src/ matMul/src/ sharedMem/src/ mandelbrot/src/ ;fi
    
    #-------------------------------------------------------------------------------
    - cd mandelbrot/
    - mkdir build/
    - cd build/
    - mkdir make/
    - cd make/
    - cmake -G "Unix Makefiles" -DBOOST_ROOT="${ALPAKA_BOOST_ROOT_DIR}" -DBOOST_LIBRARYDIR="${ALPAKA_BOOST_LIB_DIR}" -DBoost_COMPILER=${ALPAKA_BOOST_COMPILER} -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DALPAKA_SERIAL_ENABLE=${ALPAKA_SERIAL_ENABLE} -DALPAKA_THREADS_ENABLE=${ALPAKA_THREADS_ENABLE} -DALPAKA_FIBERS_ENABLE=${ALPAKA_FIBERS_ENABLE} -DALPAKA_OPENMP_ENABLE=${ALPAKA_OPENMP_ENABLE} -DALPAKA_CUDA_ENABLE=${ALPAKA_CUDA_ENABLE} -DALPAKA_DEBUG=${ALPAKA_DEBUG} -DALPAKA_INTEGRATION_TEST=${ALPAKA_INTEGRATION_TEST} -DALPAKA_CUDA_VERSION=${ALPAKA_CUDA_VERSION} "../../"
    - make
    - if [ "${ALPAKA_CUDA_ENABLE}" == "OFF" ]
      ;then 
        ./mandelbrot
      ;fi
    - cd ../../../
    
    #-------------------------------------------------------------------------------
    - cd matMul/
    - mkdir build/
    - cd build/
    - mkdir make/
    - cd make/
    - cmake -G "Unix Makefiles" -DBOOST_ROOT="${ALPAKA_BOOST_ROOT_DIR}" -DBOOST_LIBRARYDIR="${ALPAKA_BOOST_LIB_DIR}" -DBoost_COMPILER=${ALPAKA_BOOST_COMPILER} -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DALPAKA_SERIAL_ENABLE=${ALPAKA_SERIAL_ENABLE} -DALPAKA_THREADS_ENABLE=${ALPAKA_THREADS_ENABLE} -DALPAKA_FIBERS_ENABLE=${ALPAKA_FIBERS_ENABLE} -DALPAKA_OPENMP_ENABLE=${ALPAKA_OPENMP_ENABLE} -DALPAKA_CUDA_ENABLE=${ALPAKA_CUDA_ENABLE} -DALPAKA_DEBUG=${ALPAKA_DEBUG} -DALPAKA_INTEGRATION_TEST=${ALPAKA_INTEGRATION_TEST} -DALPAKA_CUDA_VERSION=${ALPAKA_CUDA_VERSION} "../../"
    - make
    - if [ "${ALPAKA_CUDA_ENABLE}" == "OFF" ]
      ;then 
        ./matMul
      ;fi
    - cd ../../../

    #-------------------------------------------------------------------------------
    - cd sharedMem/
    - mkdir build/
    - cd build/
    - mkdir make/
    - cd make/
    - cmake -G "Unix Makefiles" -DBOOST_ROOT="${ALPAKA_BOOST_ROOT_DIR}" -DBOOST_LIBRARYDIR="${ALPAKA_BOOST_LIB_DIR}" -DBoost_COMPILER=${ALPAKA_BOOST_COMPILER} -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DALPAKA_SERIAL_ENABLE=${ALPAKA_SERIAL_ENABLE} -DALPAKA_THREADS_ENABLE=${ALPAKA_THREADS_ENABLE} -DALPAKA_FIBERS_ENABLE=${ALPAKA_FIBERS_ENABLE} -DALPAKA_OPENMP_ENABLE=${ALPAKA_OPENMP_ENABLE} -DALPAKA_CUDA_ENABLE=${ALPAKA_CUDA_ENABLE} -DALPAKA_DEBUG=${ALPAKA_DEBUG} -DALPAKA_INTEGRATION_TEST=${ALPAKA_INTEGRATION_TEST} -DALPAKA_CUDA_VERSION=${ALPAKA_CUDA_VERSION} "../../"
    - make
    - if [ "${ALPAKA_CUDA_ENABLE}" == "OFF" ]
      ;then 
        ./sharedMem
      ;fi
    - cd ../../../
    
    #-------------------------------------------------------------------------------
    - cd vectorAdd/
    - mkdir build/
    - cd build/
    - mkdir make/
    - cd make/
    - cmake -G "Unix Makefiles" -DBOOST_ROOT="${ALPAKA_BOOST_ROOT_DIR}" -DBOOST_LIBRARYDIR="${ALPAKA_BOOST_LIB_DIR}" -DBoost_COMPILER=${ALPAKA_BOOST_COMPILER} -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DALPAKA_SERIAL_ENABLE=${ALPAKA_SERIAL_ENABLE} -DALPAKA_THREADS_ENABLE=${ALPAKA_THREADS_ENABLE} -DALPAKA_FIBERS_ENABLE=${ALPAKA_FIBERS_ENABLE} -DALPAKA_OPENMP_ENABLE=${ALPAKA_OPENMP_ENABLE} -DALPAKA_CUDA_ENABLE=${ALPAKA_CUDA_ENABLE} -DALPAKA_DEBUG=${ALPAKA_DEBUG} -DALPAKA_INTEGRATION_TEST=${ALPAKA_INTEGRATION_TEST} -DALPAKA_CUDA_VERSION=${ALPAKA_CUDA_VERSION} "../../"
    - make
    - if [ "$ALPAKA_CUDA_ENABLE" == "OFF" ]
      ;then 
        ./vectorAdd
      ;fi
    - cd ../../../
    
    - cd ../
  
################################################################################
# 
################################################################################
notifications:
    email: false
